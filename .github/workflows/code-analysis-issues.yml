name: Code Analysis and Issue Creation

on:
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 1'  # Esegui ogni lunedì a mezzanotte
  workflow_dispatch:  # Consente l'esecuzione manuale

jobs:
  analyze-dotnet:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      
      - name: Install .NET analyzers
        run: |
          dotnet tool install --global dotnet-format
          dotnet tool install --global dotnet-sonarscanner
      
      - name: Run code analysis
        run: |
          cd CardCollectionAPI
          dotnet format --verify-no-changes --report issues.json || true
          # Verifica che il file esista e non sia vuoto
          if [ -s issues.json ]; then
            echo "File issues.json creato con successo"
            cat issues.json | head -20  # Mostra le prime 20 righe per debug
          else
            echo "File issues.json non creato o vuoto"
            echo '[]' > issues.json  # Crea un array vuoto per evitare errori
          fi
      
      - name: Create issues from analysis
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const issuesData = fs.readFileSync('./CardCollectionAPI/issues.json', 'utf8');
              console.log('Content of issues.json:', issuesData.substring(0, 500) + '...');
              
              const issues = JSON.parse(issuesData);
              
              // Verifica che issues sia un array e che contenga elementi
              if (!Array.isArray(issues)) {
                console.log('Il file issues.json non contiene un array:', typeof issues);
                return;
              }
              
              if (issues.length === 0) {
                console.log('Nessun problema trovato dall\'analisi del codice');
                return;
              }
              
              console.log(`Trovati ${issues.length} problemi da analizzare`);
              
              // Verifica la struttura del primo elemento per debug
              console.log('Struttura del primo elemento:', JSON.stringify(issues[0], null, 2));
              
              for (const issue of issues) {
                // Verifica che l'issue abbia i campi necessari
                if (!issue || typeof issue !== 'object') {
                  console.log('Issue non valida:', issue);
                  continue;
                }
                
                // Adatta la struttura in base al formato effettivo di dotnet format
                // Questo è un esempio, potrebbe essere necessario adattarlo al formato reale
                const filePath = issue.filePath || issue.FilePath || issue.file || '';
                const line = issue.line || issue.Line || 0;
                const column = issue.column || issue.Column || 0;
                const severity = issue.severity || issue.Severity || 'info';
                const message = issue.message || issue.Message || 'Problema di formattazione del codice';
                const suggestion = issue.suggestion || issue.Suggestion || '';
                
                // Determina il tipo di issue
                let issueType = 'enhancement';
                if (severity === 'error' || severity === 'warning') {
                  issueType = 'bug';
                }
                
                // Crea l'issue solo se abbiamo almeno un messaggio e un percorso file
                if (message && filePath) {
                  console.log(`Creazione issue per: ${filePath}:${line}`);
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `[${issueType.toUpperCase()}] ${message}`,
                    body: `
                    ## Problema rilevato dall'analisi del codice
                    
                    **File**: ${filePath}
                    **Linea**: ${line}
                    **Colonna**: ${column}
                    **Severità**: ${severity}
                    
                    ### Descrizione
                    ${message}
                    
                    ### Suggerimento
                    ${suggestion || 'Nessun suggerimento automatico disponibile.'}
                    `,
                    labels: [issueType, 'backend', 'code-analysis']
                  });
                } else {
                  console.log('Issue incompleta, manca il messaggio o il percorso del file');
                }
              }
            } catch (error) {
              console.error('Errore nella creazione delle issue:', error);
            }