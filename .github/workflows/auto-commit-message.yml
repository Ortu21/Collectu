name: Auto Commit Message

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write

jobs:
  generate-commit-message:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
      
      - name: Generate commit message
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
            
            // Categorize files
            const categories = {
              feat: [],
              fix: [],
              docs: [],
              style: [],
              refactor: [],
              test: [],
              chore: []
            };
            
            changedFiles.forEach(file => {
              if (file.includes('CollectuApp/')) {
                if (file.endsWith('.tsx') || file.endsWith('.ts')) {
                  if (file.includes('/components/')) categories.feat.push(file);
                  else if (file.includes('/hooks/')) categories.feat.push(file);
                  else if (file.includes('/services/')) categories.feat.push(file);
                  else if (file.includes('/tests/')) categories.test.push(file);
                  else categories.feat.push(file);
                } else if (file.includes('README') || file.endsWith('.md')) {
                  categories.docs.push(file);
                } else if (file.endsWith('.json') || file.includes('config')) {
                  categories.chore.push(file);
                }
              } else if (file.includes('CardCollectionAPI/')) {
                if (file.includes('/Controllers/')) categories.feat.push(file);
                else if (file.includes('/Models/')) categories.feat.push(file);
                else if (file.includes('/Services/')) categories.feat.push(file);
                else if (file.includes('/Tests/')) categories.test.push(file);
                else categories.feat.push(file);
              } else {
                categories.chore.push(file);
              }
            });
            
            // Determine primary type
            let commitType = '';
            if (categories.feat.length > 0) commitType = 'feat';
            else if (categories.fix.length > 0) commitType = 'fix';
            else if (categories.refactor.length > 0) commitType = 'refactor';
            else if (categories.docs.length > 0) commitType = 'docs';
            else if (categories.test.length > 0) commitType = 'test';
            else commitType = 'chore';
            
            // Determine scope
            let commitScope = '';
            if (changedFiles.some(f => f.includes('CollectuApp/'))) {
              if (changedFiles.some(f => f.includes('CardCollectionAPI/'))) {
                commitScope = 'full-stack';
              } else {
                commitScope = 'app';
              }
            } else if (changedFiles.some(f => f.includes('CardCollectionAPI/'))) {
              commitScope = 'api';
            }
            
            // Create description
            let commitDesc = '';
            if (categories.feat.length > 0) {
              commitDesc = `add new functionality to ${commitScope}`;
            } else if (categories.fix.length > 0) {
              commitDesc = `fix issues in ${commitScope}`;
            } else if (categories.refactor.length > 0) {
              commitDesc = `improve code structure in ${commitScope}`;
            } else {
              commitDesc = `update ${commitScope} configuration`;
            }
            
            const commitMessage = `${commitType}(${commitScope}): ${commitDesc}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Suggested Commit Message:\n\`\`\`\n${commitMessage}\n\`\`\`\n\nBased on changed files:\n- ${changedFiles.join('\n- ')}`
            });