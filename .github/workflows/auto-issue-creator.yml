name: Auto Issue Creator

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  analyze-and-create-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Extract PR information
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            const prFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Analisi del titolo e del corpo della PR per determinare il tipo
            let issueType = 'enhancement';
            const bugKeywords = ['fix', 'bug', 'error', 'crash', 'resolve', 'problem'];
            const securityKeywords = ['security', 'vulnerability', 'secure', 'auth', 'authentication', 'authorization'];
            
            if (bugKeywords.some(keyword => prTitle.toLowerCase().includes(keyword))) {
              issueType = 'bug';
            } else if (securityKeywords.some(keyword => prTitle.toLowerCase().includes(keyword))) {
              issueType = 'security';
            }
            
            // Estrai i file modificati
            const changedFiles = prFiles.data.map(file => file.filename);
            
            // Determina l'area del progetto
            let area = 'general';
            if (changedFiles.some(file => file.startsWith('CardCollectionAPI/'))) {
              area = 'backend';
            } else if (changedFiles.some(file => file.startsWith('CollectuApp/'))) {
              area = 'frontend';
            }
            
            return {
              prNumber,
              prTitle,
              prBody,
              issueType,
              area,
              changedFiles: changedFiles.join('\n')
            };
      
      # Aggiungi questo step per ottenere i risultati di SonarCloud
      - name: Get SonarCloud issues
        id: sonar-issues
        uses: actions/github-script@v6
        with:
          script: |
            const axios = require('axios');
            
            try {
              // Ottieni i problemi da SonarCloud per il progetto
              const response = await axios.get(
                'https://sonarcloud.io/api/issues/search',
                {
                  params: {
                    componentKeys: 'Ortu21_Collectu',
                    resolved: 'false',
                    ps: 100,
                    createdAfter: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString() // Ultimi 7 giorni
                  },
                  headers: {
                    'Authorization': `Bearer ${{ secrets.SONAR_TOKEN }}`
                  }
                }
              );
              
              // Filtra i problemi rilevanti per questa PR
              const prInfo = ${{ steps.pr-info.outputs.result }};
              const changedFilesArray = prInfo.changedFiles.split('\n');
              
              const relevantIssues = response.data.issues.filter(issue => {
                // Controlla se il file con il problema Ã¨ tra quelli modificati nella PR
                const issueFile = issue.component.split(':')[1];
                return changedFilesArray.some(file => issueFile && issueFile.includes(file));
              });
              
              return {
                issues: relevantIssues
              };
            } catch (error) {
              console.error('Error fetching SonarCloud issues:', error);
              return { issues: [] };
            }
      
      - name: Create issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prInfo = ${{ steps.pr-info.outputs.result }};
            const sonarIssues = ${{ steps.sonar-issues.outputs.result }};
            
            // Crea un titolo per l'issue
            const issueTitle = `[${prInfo.issueType.toUpperCase()}][${prInfo.area}] ${prInfo.prTitle}`;
            
            // Prepara il corpo dell'issue con informazioni dalla PR
            let issueBody = `
            ## Descrizione
            Issue generata automaticamente dalla PR #${prInfo.prNumber}
            
            ${prInfo.prBody}
            `;
            
            // Aggiungi i problemi rilevati da SonarCloud
            if (sonarIssues && sonarIssues.issues && sonarIssues.issues.length > 0) {
              issueBody += `
              
              ## Problemi rilevati da SonarCloud
              
              ${sonarIssues.issues.map(issue => `- **${issue.severity}**: ${issue.message} in \`${issue.component.split(':')[1]}\` (linea ${issue.line || 'N/A'})`).join('\n')}
              `;
            }
            
            // Crea l'issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: [prInfo.issueType, prInfo.area]
            });